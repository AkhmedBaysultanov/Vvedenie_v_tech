import math
#Д_д = float(input("Введите значение Д_д: "))
Д_ок = float(input("Введите значение диаметр промежуточной колонны: "))
δ_ок = float(input("Введите значение толщины обсадной колонны: "))
α_y11 = float(input("Введите значение внутренного диаметра первой ступени: "))
Д_y1 = float(input("Введите значение наружного диаметра первой ступени: "))
Gg = float(input("Введите значение нагрузки на долото: "))
G = Gg * 1000
g = float(input("Введите значение ускорения свободного падения: "))
m_y11 = float(input("Введите значение массы 1м УБТ переходной колонны  "))
m_y1 = float(input("Введите значение вес стандартных труб УБТС2-273: "))
К = float(input("Введите значение коэффициента каверзности: "))
Д_долото = float(input("Введите значение диаметра долота/скважины: "))
Д_з = float(input("Введите значение диаметра бурильного замка: "))
W_ос = float(input("Введите значение осевого момента напряжения - W_ос: "))
σ_b = float(input("Введите значение амплитуды переменных нагружений изгиба: "))
Д_ср = float
Д_ср = Д_y1 / Д_ок
α_y1 = α_y11 / 1000
k_g = 1.175                      #константа по формуле 4
P = G * 0.5                      # по условию
k_p = 0.783                     # константа
EJ_y1 = 56200 * 10 ** 3         # условие
ω = (math.pi * 60) / 30         # условие
E = 2.06 * 10 ** 11             #Модуль Юнга
J_oc = 927.6 * 10 ** -8         #Осевой момент инерции сечения тела трубы
EJ_ос = E * J_oc
Д_с = К * Д_долото
m_m = 39.9                      # масса первой секции труб

numerator = 1 - (((Д_ок  - 2 * δ_ок ) / Д_ок ) ** 4)
denominator = 1 - ((α_y1  / Д_y1 ) ** 4)

result = math.pow(numerator / denominator, 1/4)
print("Значение β равно:", result)

if 0.843 > 0.693 :
    print("Следовательно, УБТС2-273 обладает необходимой жесткостью при бурении")

Д_уп = 1.333 * 139.7
Д_2 = 0.75 * 273
print ("Условию соответствует УБТС2-229")

#Начинается вычисление основной ступени УБТ
k_p = 0.783

l_y12 = 25
m_y3 = 397.8
m_y2 = 155.9
l_y1 = (k_g * G - g * (m_y11 * l_y12 + m_y2 * l_y12) * k_p) / (g * m_y3 * k_p)
print("Длина основной ступени УБТ равна:", l_y1)

l_yybt = l_y1+2*l_y12
print("Общая длина УБТ равна:", l_yybt)
Q_ya = g * (m_y11 * l_y12 + m_y2 *l_y12 + m_y3*50)
Q_y = round(Q_ya/1000, 1)
print("Общий вес компановки УБТ равен: ", Q_y)

l_nyy = 3.65 / ω * math.sqrt((-P + math.sqrt(P ** 2 + 10.72 * EJ_y1 * m_y1 * ω ** 2)) / (2 * m_y1))
l_ny = round(l_nyy, 1)
print("Значение l_ny равно: ", l_ny, "м")

k_onn = G / (g * m_y1 * k_p * l_ny) - 1
k_on = round(k_onn, 1)
print("Значение k_on равно:", k_on)

# Определим длину полуволн при P=0

L_neokr = (math.pi / ω) * math.sqrt(math.sqrt(4 * EJ_ос * m_m * ω ** 2) / (2 * m_m))
L = round(L_neokr, 1)

print("Значение L - длины полуволны, равно:", L, "м")


f_f = (Д_с * 0.001 - Д_з * 0.001) / 2
f = round(f_f, 2)
print("Значение f - радиального зазора равно:", f, "м")

# Определим напряжение изгиба по формуле


σ_uu = (math.pi ** 2 * EJ_ос * f) / (L ** 2 * W_ос * 10 ** -6)
σ_u = round(σ_uu / 1000000, 1)
print("Значение σ_u - напряжение изгиба равно:", σ_u, "МПа")

# Расчетный КПЗ
σ_m = σ_u  # согласно формуле 32
σ_a = 0.5 * σ_u  # согласно формуле 32

σ_1 = 128  # значение не было найдено
σ_p = 0  # т.к Р = 0

u_σσ = (σ_1 / σ_a) * (1 - (σ_p / σ_b)) / (1 + (σ_1 / σ_b) * (σ_m / σ_a))
u_σ = round(u_σσ, 1)
print("Значение КЗП по усталости для 1 секции равно:", u_σ)
file = open('datamain.txt', 'w', encoding='utf-8')
file.write("Значение КЗП по усталости для 1 секции равно:" + str(u_σ) + "\n")
if u_σ > 1.5:
    print("Больше нормативного 1.5")

# Проверка секции на статическую прочность
Q_y = 300406.7  # убрать при соединение в общую кашу (заранее высчитывалось)
l_1 = 250
Q_b11 = k_p * m_m * g * l_1
Q_b1 = round(Q_b11, 1)
print("Значение Q_b1 равно: ", Q_b1)
Q_kh = k_p * Q_y
F_K = (math.pi * ((0.1397 - 2 * 0.011) ** 2)) / 4
ΔP = g * 10 ** 6
K_k = 1.15
Q_pp = K_k * (Q_b1 + Q_kh) + ΔP * F_K
Q_p = round(Q_pp, 1)
print("значение Q_p равно: ", Q_p, "H")

F = math.pi * (0.1397 ** 2 - 0.117 ** 2) / 4
σ_ppp = Q_p / F
σ_p = round(σ_ppp / 1000000, 1)
print("значение σ_p равно: ", σ_p, "")
σ_э = math.sqrt((σ_p + σ_u) ** 2)
print("значение σ_э равно: ", σ_э)
σ_mm = 372  # константа?
U_111 = σ_mm / σ_э
U_1 = round(U_111, 2)
print("КПЗ статической равно: ", U_1)
file.write("КПЗ статической равно: " +str(U_1) + "\n")
print('Для комнопоновки 2-ой секции примем трубу В-139.7x9-Д')
# Проверка этой трубу на сопротивление усталости по формулам
Q_pr = Q_b1
Q_p = round(Q_pr, 1)
print("Значение Q_p для второй секции:", Q_p)

σ_ppp = Q_p / F
F = 0.005652
σ_p = round(σ_ppp / 1000000, 1)
print("Значение σ_p для 2-ой секции ", σ_p)

# Формула 33
P = 7.662 * 10 ** 4
EJ_oc = 2.06 * 10 ** 11 * 792.8 * 10 ** -8
m_m = 33.8
ω = 6.28

L = math.pi / ω * math.sqrt((P + math.sqrt(P ** 2 + 4 * EJ_oc * m_m * ω ** 2)) / (2 * m_m))

print("Значение L для 2 секции равно:", L)
W_ос = 156.6 * 10 ** -6
σ_uu = (math.pi ** 2 * EJ_oc * f) / (L ** 2 * W_ос)
σ_u = round(σ_uu, 1)
print("Значение σ_u для второй секции равно: ", σ_u, "МПа")
# формула 35
σ_m = σ_u
print("Значение σ_m для второй секции равно: ", σ_m)
σ_a = 0.5 * σ_m
print("Значение σ_a для второй секции равно: ", σ_a)
σ_11 = 67
σ_b = 637
σ_p = 13.56
σ_m = 18.31
σ_a = 0.5 * σ_m
u_σ22 = (σ_11 / σ_a) * (1 - (σ_p / σ_b)) / (1 + (σ_11 / σ_b) * (σ_m / σ_a))
u_σ2 = round(u_σ22, 2)
print("КЗП по усталости на 2 секцию равно:", u_σ2)
file.write("КЗП по усталости на 2 секцию равно: " + str(u_σ2) + '\n')
if u_σ2 > 1.5:
    print(" Больше нормативного 1.5")
# определение наибольшей допустимой длины 2-й секции
σ_m = 372 * 10 ** 6
F = 3695 * 10 ** -6
U = 1.4
file.write("КПЗ по статической для второй секции: " + str(U) + "\n")
Q_pmaxx = (σ_m * F) / U
Q_pmax = round(Q_pmaxx)
Q_ppmax = round(Q_pmax / 10000, 3)
print("Нарастающая масса для 2 секции равна: ", Q_pmax, "H")
file.write("Нарастающая масса для 2 секции равна: " + str(Q_ppmax) + " KH\n")
Q_kh = 235218.4
K_τ = 1.04
k = 1.15
F_k = 11632 * 10 ** -6
l_22 = (Q_pmax / K_τ - k * (Q_b1 + Q_kh) - ΔP * F_k) / (k * k_p * g * m_m)
l_2 = round(l_22)
print("Наибольше допустимое значение 2 секции равно:", l_2, "м")
file.write("Длина 2 секции равна: "+ str(l_2) + "м\n")
# фактическое значение КЗП в верхнем сечении 2-й секции
Q_b22 = (l_2 * k_p * g * m_m)
Q_b2 = round(Q_b22, 2)
print("Значение Q_b2 равно: ", Q_b2, 'H')
Q_p22 = k * (Q_kh + Q_b1 + Q_b2) + ΔP * F_k
Q_p2 = round(Q_p22, 2)
print("Значение Q_p2 равно: ", Q_p2)
σ_ppp = Q_p2 / F
σ_p = round(σ_ppp / 1000000, 1)
print("Значение σ_p для 2 секции равно:", σ_p, "H")
N_вр = 28.12
nn = 60  # обычное n - надо будет вначале ввести
M_kk = 9545 * N_вр / nn
M_k = round(M_kk, 1)
print("Значение M_k для второй секции равно:", M_k, "H*m")
W_p = 2 * 113.5
τ_kk = M_k / W_p
τ_k = round(τ_kk, 1)
print("Значение τ_k для второй секции равно: ", τ_k, "Па")
P_p = Q_kh + Q_b1 + Q_b2
P = round(P_p, 2)
print("Значение P для второй секции равно: ", P, "H")
L_l = math.pi / ω * math.sqrt((P + math.sqrt(P ** 2 + 4 * EJ_oc * m_m * ω ** 2)) / (2 * m_m))
L = round(L_l, 1)
print("Значение L для второй секции равно:", L, 'м')
σ_uu = (math.pi ** 2 * EJ_oc * f) / (L ** 2 * W_ос)
σ_u = round(σ_uu / 1000000, 2)
print("Значение σ_u для второй секции равно:", σ_u, 'МПа')
σ_u = 4.22
σ_ээ = math.sqrt((σ_p + σ_u) ** 2 + 3 * (τ_k * 10 ** -6) ** 2)
σ_э = round(σ_ээ, 2)
print("Значение σ_э для второй секции равно: ", σ_э, "МПа")
U_22 = σ_m / σ_э
U_2 = round(U_22 / 10000)
print("Запас прочности равен: ", U_2)

# 3 секция
# Для компоновки 3-й секции примем трубу В-139 x 9К
# Проверка трубы на сопротивление усталости
Q_p3 = Q_b1 + Q_b2
print("Значение Qp для 3 трубы равно: ", Q_p3, "H")
F = 5652 * 10 ** -6
σ_p33 = Q_p3 / F
σ_p3 = round(σ_p33 / 1000000, 2)
print("Значение σ_p для 3 трубы равно: ", σ_p3)
L_33 = math.pi / ω * math.sqrt((Q_p3 + math.sqrt(Q_p3 ** 2 + 4 * EJ_oc * m_m * ω ** 2)) / (2 * m_m))
L_3 = round(L_33)
print("Значение L для 3 трубы равно: ", L_3, "м")
f = 0.114
σ_u33 = (math.pi ** 2 * EJ_oc * f) / (60**2 * W_ос)
σ_u3 = round(σ_u33 / 1000000, 2)
print("Значение σ_u3 для 3 трубы равно: ", σ_u3, "МПа")
σ_m3 = σ_u3
σ_a3 = 0.5 * σ_m3
print("Значение σ_a для 3 трубы равно: ", σ_a3)
σ_3 = 59
σ_b3 = 686
U_σ33 = (σ_3 / σ_a3) * (1 - (σ_p3 / σ_b3)) / (1 + (σ_3 / σ_b3) * (σ_m3 / σ_a3))
U_σ3 = round(U_σ33)
print("Значение U_σ для 3 трубы равно: ", U_σ3)
σ_m33 = 490
U_τ33 = σ_m33 / (2 * τ_k)
U_τ3 = round(U_τ33, 2)
print("Значение U_τ для 3 трубы равно: ", U_τ3)
U_33 = (U_σ3 * U_τ3) / math.sqrt(U_σ3**2 + U_τ3**2)
U_3 = round(U_33,2)
print("Значение КЗП усталости для 3 трубы равно: ", U_3)
file.write("Значение КЗП усталости для 3 трубы равно: " + str(U_3) + "\n")
#Определение наибольшей допустимой длины 3-й секции
F = 3695 * 10**-6
Q_pmax33 = (σ_m33 * 10**6 * F)/U
Q_pmax3 = round(Q_pmax33)
Q_ppmax3 = round(Q_pmax/10000, 3)
print("Значение Q_pmax для 3 секции труб равно: ", Q_pmax3, "H")
file.write("Значение нарастающей массы для 3 секции труб равно: " + str(Q_ppmax3) + " KH\n")
m_m = 33.8
l_33 = (Q_pmax3 / K_τ - k * (Q_b1 + Q_b2 + Q_kh) - ΔP * F_k) / (k * k_p * g * m_m)
l_3 = round(l_33)
print("Наибольшая допустимая длина 3 секции бурильных труб:", l_3, "м")
file.write("Длина 3 секции бурильных труб равна:" + str(l_3) + "м\n")
#Определение фактическое значение КЗП в верхнем сечении 3-й секции
Q_b3 = k_p * g * m_m * l_3
print("Значение Qb3 равно:", Q_b3)
Qp_333 = k*(Q_kh+ Q_b1+ Q_b2+ Q_b3)+ΔP * F_k
Qp_3 = round(Qp_333)
print("Значение Qp для 3 секции труб равно:",Qp_3, "H")
σ_pp_3 = Qp_3 / F
σ_p_3 = round(σ_pp_3 / 1000000, 2)
print("Значение σ_p для верхнего сечений 3-ей секции равен: ",σ_p_3 )
γ_ж = 16677 + 2812
Д_обс_n = (0.426 - 2 * 0.01)
Д_3 = 0.1397
N_вр3 = 13.5 * 10**-8 * l_3 * Д_3**2 * 60**1.5 * Д_обс_n**0.5 * γ_ж
N_вр33 = 31.57
print("Значение N_вр в верхнем сечении 3-ей секции равно: ", N_вр33 )
M_k33 = 9545 * N_вр33/ 60
M_k3 = round(M_k33, 2)
print("Крутящий момент M_k в верхнем сечении 3-й секции равно: ", M_k3)
τ_k33 = M_k3/W_p
τ_k3 = round(τ_k33, 2)
print("Касательная напряжения в верхнем сечении 3-й секции равно: ", τ_k3 , "Па")
P_3 = Q_kh + Q_b1 + Q_b2 + Q_b3
print("Значение P_3 в верхнем сечении 3-й секции равно: ", P_3)
L_3_33 = math.pi / ω * math.sqrt((P_3 + math.sqrt(P_3 ** 2 + 4 * EJ_oc * m_m * ω ** 2)) / (2 * m_m))
L_3_3 = round(L_3_33, 1)
print("Значение L в верхней сечении 3-й секции равно:", L_3_3)
σ_u_33 = (math.pi ** 2 * EJ_oc * f) / (L_3_3 ** 2 * W_ос)
σ_u_3 = round(σ_u_33 / 1000000, 2)
print("Значение σ_u в верхнем сечении 3-й секции равно:",σ_u_3, "МПа")
σ_э33 = math.sqrt((σ_p_3 + σ_u_3) ** 2 + 3 * (τ_k3 * 10 ** -6) ** 2)
σ_э3 = round(σ_э33, 1)
print("Значение σ_э в верхнем сечении 3-й секции равно:", σ_э3)
U_c_3 = σ_m33/σ_э3
print("Значение прочности в 3 секции труб итоговое равно: ", U_c_3)

#Компоновка 4-й секции
#Примем трубу В-139 х 9Е
#Определим наибольшую допустимую длину этой секции по формуле
σ_m4 = 539 * 10**6
F_4 = 3695 * 10**-6
Q_pmax44 = (σ_m4*F_4)/U
Q_pmax4 = round(Q_pmax44)
Q_ppmax4 = round( Q_pmax4/10000, 2)
print("Значение Q_pmax для 4 секции равно: ", Q_pmax4, "H")
file.write("Значение нарастающей массы для 4 секции равно: "+ str(Q_ppmax4) + " KH\n")
l_44 = (Q_pmax4 / K_τ - k * (Q_b1 + Q_b2 + Q_b3 + Q_kh) - ΔP * F_k) / (k * k_p * g * m_m)
l_4 = round(l_44)
print("Длина 4 секции равна: ",l_4 )
file.write("Длина 4 секции равна: " + str(l_4) + "м\n")
Q_b4 = k_p * g * m_m * l_4
print("Значение Q_b для 4 секции равно", Q_b4)

#Если при этой длине для определения σ_э воспользоваться приближенной формулой
#формулой 37б, то вычислять фактический КЗП нет необходимости, т.к он заведемо будет равен 1.4
#что вытекает из анализа формул 45, 44, 10 и 37б

#Для компоновки 5-й секции примем трубу В-139.7 х 9Л
#Определение наибольшей допустимой длины этой секции
σ_m5 = 637
F_5 = 3695

Q_pmax55 = (σ_m5*F_5)/U
Q_pmax5 = round(Q_pmax55)
Q_ppmax5 = round(Q_pmax5/10000 , 2)
print("Значение нарастающей массы для 5 секции равно:", Q_pmax5, "H")
file.write("Значение нарастающей массы для 5 секции равно: " + str(Q_ppmax5) + " KH\n")
l_55 = (Q_pmax5 / K_τ - k * (Q_b1 + Q_b2 + Q_b3 + Q_b4 + Q_kh)- ΔP * F_k) / (k * k_p * g * m_m)
l_5 = round(l_55, 1)
print("Наибольшая  допускаемая длина 5 секции равно: ",l_5)
l_5 = 450.9
file.write("Длина 5 секции равна:" + str(l_5) + "м\n")
Q_b5 = k_p * g * m_m * l_5
print("Значение Q_b для 5 секции равно", Q_b5)

#Определение допустимой длины 6 секции: примем трубы В-139.7 х 10Л
σ_m6 = 637
F_6 = 4075
Q_pmax66 = (σ_m6*F_6)/U
Q_pmax6 = round(Q_pmax66)
Q_ppmax6 = round(Q_pmax6 / 10000, 2 )
print("Значение нарастающей массы для 6 секции равно:", Q_pmax6, " H")
file.write("Значение нарастающей массы для 6 секции равно: "+ str(Q_ppmax6) + " KH\n")

l_66 = (Q_pmax5 / K_τ - k * (Q_b1 + Q_b2 + Q_b3 + Q_b4 + Q_b5 + Q_kh)- ΔP * F_k) / (k * k_p * g * m_m)
l_6 = 701.1
print("Наибольшая  допускаемая длина 6 секции равно: ",l_6)
file.write("Длина 6 секции равна: "+ str(l_6) + "м\n")